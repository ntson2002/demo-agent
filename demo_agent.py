import json
from openai import OpenAI
from dotenv import load_dotenv
from modules.utils import cprint
from modules.tools import get_stock_price, get_student_info, calculate, get_current_weather, tool_descriptions
load_dotenv()


class SimpleAgent:
    def __init__(self, system_instruction=None):
        self.client = OpenAI()
        self.history = []
        self.system_instruction = system_instruction or "B·∫°n l√† m·ªôt AI assistant th√¥ng minh c√≥ kh·∫£ nƒÉng cung c·∫•p th√¥ng tin th·ªùi ti·∫øt, th√¥ng tin sinh vi√™n v√† th·ª±c hi·ªán c√°c ph√©p t√≠nh to√°n. H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† c·ªë g·∫Øng h·ªØu √≠ch nh·∫•t c√≥ th·ªÉ."
        self.tools = tool_descriptions 
        self.available_functions = {
            "get_current_weather":get_current_weather,
            "get_stock_price": get_stock_price,
            "get_student_info": get_student_info,
            "calculate": calculate
        }

    def run_conversation(self, prompt):
        # Step 1: send the conversation and available functions to the model
        messages = [{"role": "system", "content": self.system_instruction}]
        
        # Th√™m l·ªãch s·ª≠ chat v√†o messages
        messages.extend(self.history)
        
        # Th√™m message hi·ªán t·∫°i
        messages.append({"role": "user", "content": prompt})
        
        response = self.client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            tools=self.tools,
            tool_choice="auto",  # auto is default, but we'll be explicit
        )
        response_message = response.choices[0].message
        tool_calls = response_message.tool_calls
        
        # L∆∞u user message v√†o history
        self.history.append({"role": "user", "content": prompt})
        
        # print(response_message)
        # Step 2: check if the model wanted to call a function
        if tool_calls:
            
            # Step 3: call the function
            # Note: the JSON response may not always be valid; be sure to handle errors
            messages.append(response_message)  # extend conversation with assistant's reply
            # Step 4: send the info for each function call and function response to the model
            for tool_call in tool_calls:
                function_name = tool_call.function.name
                
                function_to_call = self.available_functions[function_name]
                function_args = json.loads(tool_call.function.arguments)
                cprint(f"\nü§ñ Agent ƒëang g·ªçi tool {function_name} v·ªõi tham s·ªë {function_args}...", color="blue")
                # print(function_to_call)
                # print(function_args)
                function_response = function_to_call(**function_args)
                messages.append(
                    {
                        "tool_call_id": tool_call.id,
                        "role": "tool",
                        "name": function_name,
                        "content": function_response,
                    }
                )  # extend conversation with function response
            second_response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=messages,
            )  # get a new response from the model where it can see the function response

            # L∆∞u assistant response v√†o history
            self.history.append({"role": "assistant", "content": second_response.choices[0].message.content})
            return second_response
        
        # L∆∞u assistant response v√†o history
        self.history.append({"role": "assistant", "content": response_message.content})
        return response

hello_world = """
====================================================
============üå§Ô∏è      SimpleAgent Chat    =============
====================================================
üëã Ch√†o m·ª´ng! T√¥i l√† SimpleAgent, c√≥ th·ªÉ gi√∫p b·∫°n:
- Ki·ªÉm tra th·ªùi ti·∫øt
- L·∫•y gi√° c·ªï phi·∫øu
- T√¨m th√¥ng tin sinh vi√™n
- Th·ª±c hi·ªán c√°c ph√©p t√≠nh
G√µ 'exit' ƒë·ªÉ tho√°t
====================================================
"""
if __name__ == "__main__":
    agent = SimpleAgent()
    print(hello_world)
    while True:
        try:
            user_input = input("\nüë§ B·∫°n: ").strip()
            
            if user_input.lower() == 'exit':
                cprint("üëã T·∫°m bi·ªát! H·∫πn g·∫∑p l·∫°i! üëã", color="green")
                break
                
            if not user_input:
                print("‚ö†Ô∏è  Vui l√≤ng nh·∫≠p tin nh·∫Øn!")
                continue
                
            cprint("\nü§ñ Agent ƒëang x·ª≠ l√Ω...", color="blue")
            response = agent.run_conversation(user_input)
            cprint(f"\nü§ñ Agent: {response.choices[0].message.content}", color="magenta")
            
        except KeyboardInterrupt:
            cprint("\n\nüëã T·∫°m bi·ªát! H·∫πn g·∫∑p l·∫°i! üëã", color="green")
            break
        except Exception as e:
            cprint(f"‚ùå L·ªói: {e}", color="red")
            cprint("üîÑ Vui l√≤ng th·ª≠ l·∫°i!", color="red")